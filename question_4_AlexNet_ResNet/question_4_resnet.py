# -*- coding: utf-8 -*-
"""question_4_ResNet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_pMBAf8Q-n79RbRZkr1eXteE6aZdQgp4

*   tensorflow.keras provides tools for deep learning model construction.
*   layers is used to define Conv2D, Add, Activation, Flatten, and Dense layers.
"""

import tensorflow as tf
from tensorflow.keras import layers, models

"""*   First Conv2D Layer: Extracts features using ReLU activation.
*   Second Conv2D Layer: Retains spatial dimensions using padding='same'.
*   Skip Connection: Adds the input tensor to the output before activation, preventing vanishing gradients.
*   Final Activation Layer: Applies ReLU after the skip connection.
"""

def residual_block(input_tensor, filters):
    x = layers.Conv2D(filters=filters, kernel_size=(3,3), padding='same', activation='relu')(input_tensor)
    x = layers.Conv2D(filters=filters, kernel_size=(3,3), padding='same')(x)

    # Skip connection
    x = layers.Add()([x, input_tensor])
    x = layers.Activation('relu')(x)

    return x

"""Initial Conv Layer:
*   Uses 64 filters with kernel size (7Ã—7) and stride 2 for feature extraction.

Residual Blocks:
*   Two residual blocks with skip connections to retain feature integrity.

Final Layers:

*   Flatten Layer converts 2D features into 1D vectors.
*   Dense Layer (128 neurons, ReLU activation) processes high-level features.
*   Softmax Output Layer (10 neurons) classifies into 10 categories.


"""

def create_resnet():
    inputs = layers.Input(shape=(224, 224, 3))

    # Initial Conv Layer
    x = layers.Conv2D(filters=64, kernel_size=(7,7), strides=2, padding='same', activation='relu')(inputs)

    # Apply two residual blocks
    x = residual_block(x, 64)
    x = residual_block(x, 64)

    # Final layers
    x = layers.Flatten()(x)
    x = layers.Dense(128, activation='relu')(x)
    outputs = layers.Dense(10, activation='softmax')(x)

    model = models.Model(inputs, outputs)
    return model

"""

*   Calls create_resnet() to initialize the model.
*   Prints layer-wise details, output shapes, and number of parameters.

"""

# Create ResNet Model
resnet_model = create_resnet()

# Print Model Summary
resnet_model.summary()