# -*- coding: utf-8 -*-
"""question_4_AlexNet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_pMBAf8Q-n79RbRZkr1eXteE6aZdQgp4

Importing required libraries
*   tensorflow.keras provides deep learning layers and models for easy model construction.
*   We will use layers to define Conv2D, MaxPooling, Flatten, Dense, and Dropout layers.
"""

import tensorflow as tf
from tensorflow.keras import layers, models

"""*   Conv2D Layers extract spatial features from input images.
*   MaxPooling2D reduces dimensionality, preventing overfitting.
*   Flatten Layer converts 2D feature maps into 1D vectors for fully connected layers.
*   Dense Layers perform classification with 4096 neurons each.
*   Dropout Layers help prevent overfitting by randomly disabling 50% of neurons.
*   Softmax Output Layer predicts 10 classes (useful for classification tasks like ImageNet).
"""

def create_alexnet():
    model = models.Sequential([
        # 1st Convolutional Layer
        layers.Conv2D(filters=96, kernel_size=(11,11), strides=4, activation='relu', input_shape=(227,227,3)),
        layers.MaxPooling2D(pool_size=(3,3), strides=2),

        # 2nd Convolutional Layer
        layers.Conv2D(filters=256, kernel_size=(5,5), activation='relu', padding='same'),
        layers.MaxPooling2D(pool_size=(3,3), strides=2),

        # 3rd, 4th, and 5th Convolutional Layers
        layers.Conv2D(filters=384, kernel_size=(3,3), activation='relu', padding='same'),
        layers.Conv2D(filters=384, kernel_size=(3,3), activation='relu', padding='same'),
        layers.Conv2D(filters=256, kernel_size=(3,3), activation='relu', padding='same'),
        layers.MaxPooling2D(pool_size=(3,3), strides=2),

        # Flatten Layer
        layers.Flatten(),

        # Fully Connected Layers with Dropout
        layers.Dense(4096, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(4096, activation='relu'),
        layers.Dropout(0.5),

        # Output Layer
        layers.Dense(10, activation='softmax')
    ])

    return model

"""*   Calls create_alexnet() to initialize the model.
*   Stores the model in alexnet_model for further training or evaluation.
"""

# Create AlexNet Model
alexnet_model = create_alexnet()

"""*   Displays layer-wise architecture, number of parameters, and output shapes.
*   Helps verify the correct implementation of the AlexNet structure.

"""

# Print Model Summary
alexnet_model.summary()